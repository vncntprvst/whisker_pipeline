<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.7.1"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xmlns:rx="clr-namespace:Bonsai.Reactive;assembly=Bonsai.Core"
                 xmlns:cv="clr-namespace:Bonsai.Vision;assembly=Bonsai.Vision"
                 xmlns:scr="clr-namespace:Bonsai.Scripting.Expressions;assembly=Bonsai.Scripting.Expressions"
                 xmlns:io="clr-namespace:Bonsai.IO;assembly=Bonsai.System"
                 xmlns:ipy="clr-namespace:Bonsai.Scripting.IronPython;assembly=Bonsai.Scripting.IronPython"
                 xmlns="https://bonsai-rx.org/2018/workflow">
  <Workflow>
    <Nodes>
      <Expression xsi:type="GroupWorkflow">
        <Name>Path</Name>
        <Description>Path</Description>
        <Workflow>
          <Nodes>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="Directory" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>D:\Vincent\NWB\ExampleDatasets\Vincent\Ephys_Behavior\whisker_asym\sc007\sc007_1216\WhiskerTracking\</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:First" />
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>DirName</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="ExternalizedMapping">
              <Property Name="Value" DisplayName="VideoFileName" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="StringProperty">
                <Value>test.mp4</Value>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:First" />
            </Expression>
            <Expression xsi:type="rx:ReplaySubject">
              <Name>VideoFileName</Name>
              <rx:BufferSize xsi:nil="true" />
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="ExternalizedMapping">
                <Property Name="Value" DisplayName="CSVFileName" />
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="StringProperty">
                  <Value>NoseTipCoordinates.csv</Value>
                </Combinator>
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="Combinator">
                <Combinator xsi:type="rx:First" />
              </Builder>
            </Expression>
            <Expression xsi:type="Disable">
              <Builder xsi:type="rx:ReplaySubject">
                <Name>CSVFileName</Name>
                <rx:BufferSize xsi:nil="true" />
              </Builder>
            </Expression>
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="6" To="7" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="10" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="GroupWorkflow">
        <Name>ProcessVideo</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="GroupWorkflow">
              <Name>Input video filename</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>VideoFileName</Name>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>DirName</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Zip" />
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Name>video filename</ipy:Name>
                    <ipy:Description>video filename</ipy:Description>
                    <ipy:Script>import clr

def getOutputType():
    return clr.GetClrType(str)

def process(value):
  path = value.Item2 + value.Item1
  return path
</ipy:Script>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="2" Label="Source1" />
                  <Edge From="1" To="2" Label="Source2" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="FileName" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:FileCapture">
                <cv:FileName>D:\Vincent\NWB\ExampleDatasets\Vincent\Ephys_Behavior\whisker_asym\sc007\sc007_1216\WhiskerTracking\test.mp4</cv:FileName>
                <cv:PlaybackRate>100</cv:PlaybackRate>
                <cv:StartPosition>0</cv:StartPosition>
                <cv:PositionUnits>Frames</cv:PositionUnits>
                <cv:Loop>true</cv:Loop>
                <cv:Playing>true</cv:Playing>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Take">
                <rx:Count>1</rx:Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:Grayscale" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="cv:CropCenter">
                <cv:Size>
                  <cv:Width>400</cv:Width>
                  <cv:Height>400</cv:Height>
                </cv:Size>
                <cv:FillValue>
                  <cv:Val0>0</cv:Val0>
                  <cv:Val1>0</cv:Val1>
                  <cv:Val2>0</cv:Val2>
                  <cv:Val3>0</cv:Val3>
                </cv:FillValue>
              </Combinator>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>FindNoseTip</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:Threshold">
                      <cv:ThresholdValue>9</cv:ThresholdValue>
                      <cv:MaxValue>255</cv:MaxValue>
                      <cv:ThresholdType>BinaryInv</cv:ThresholdType>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Disable">
                    <Builder xsi:type="Combinator">
                      <Combinator xsi:type="cv:AdaptiveThreshold">
                        <cv:MaxValue>255</cv:MaxValue>
                        <cv:AdaptiveMethod>MeanC</cv:AdaptiveMethod>
                        <cv:ThresholdType>Binary</cv:ThresholdType>
                        <cv:BlockSize>3</cv:BlockSize>
                        <cv:Parameter>5</cv:Parameter>
                      </Combinator>
                    </Builder>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:MorphologicalOperator">
                      <cv:Size>
                        <cv:Width>10</cv:Width>
                        <cv:Height>10</cv:Height>
                      </cv:Size>
                      <cv:Anchor>
                        <cv:X>5</cv:X>
                        <cv:Y>5</cv:Y>
                      </cv:Anchor>
                      <cv:Shape>Rectangle</cv:Shape>
                      <cv:Iterations>1</cv:Iterations>
                      <cv:Operation>Open</cv:Operation>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:FindContours">
                      <cv:Mode>External</cv:Mode>
                      <cv:Method>ChainApproxNone</cv:Method>
                      <cv:Offset>
                        <cv:X>0</cv:X>
                        <cv:Y>0</cv:Y>
                      </cv:Offset>
                      <cv:MinArea>6000</cv:MinArea>
                      <cv:MaxArea xsi:nil="true" />
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:BinaryRegionAnalysis" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:LargestBinaryRegion" />
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="cv:BinaryRegionExtremes">
                      <cv:Method>Vertical</cv:Method>
                    </Combinator>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:CombineLatest" />
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Script>import clr
#import math
clr.AddReference("Bonsai.Vision")
clr.AddReference("OpenCV.Net")
#from System import Tuple, Math, Single
from OpenCV.Net import Point2f
from Bonsai.Vision import ConnectedComponent

head = None
tail = None

def distancesquare(pt1,pt2):
  dx = (pt2.X - pt1.X)
  dy = (pt2.Y - pt1.Y)
  return dx * dx + dy * dy

@returns(Point2f)
def process(value):
  global head, tail
  #pi = math.pi

  LBRegion= value.Item1
  contour = LBRegion.Contour

  ExtremePoints= value.Item2
  pt1 = ExtremePoints.Item1
  pt2 = ExtremePoints.Item2

  if contour is not None and contour.Count &gt; 0:
    if head is None or distancesquare(pt1, head) &lt; distancesquare(pt1, tail):
      head = pt1
      tail = pt2
    else:
      head = pt2
      tail = pt1
  return head</ipy:Script>
                  </Expression>
                  <Expression xsi:type="scr:ExpressionTransform">
                    <scr:Expression>new(
int32(it.X) as noseX,
int32(it.Y) as noseY
)</scr:Expression>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="2" Label="Source1" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source1" />
                  <Edge From="5" To="6" Label="Source1" />
                  <Edge From="6" To="7" Label="Source1" />
                  <Edge From="6" To="8" Label="Source1" />
                  <Edge From="7" To="8" Label="Source2" />
                  <Edge From="8" To="9" Label="Source1" />
                  <Edge From="9" To="10" Label="Source1" />
                  <Edge From="10" To="11" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>ImageDimensions</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Width,Height</Selector>
                  </Expression>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source2</Name>
                  </Expression>
                  <Expression xsi:type="MemberSelector">
                    <Selector>Size</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Zip" />
                  </Expression>
                  <Expression xsi:type="scr:ExpressionTransform">
                    <scr:Expression>new(
Item1.Width as cropWidth,
Item1.Height as cropHeight,
Item2.Item1 as imageWidth,
Item2.Item2 as imageHeight
)</scr:Expression>
                  </Expression>
                  <Expression xsi:type="scr:ExpressionTransform">
                    <scr:Expression>new(
imageWidth/2 - cropWidth/2 as addWidth,
imageHeight/2 - cropHeight/2 as addHeight
)</scr:Expression>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="1" Label="Source1" />
                  <Edge From="1" To="4" Label="Source2" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                  <Edge From="4" To="5" Label="Source1" />
                  <Edge From="5" To="6" Label="Source1" />
                  <Edge From="6" To="7" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="rx:Zip" />
            </Expression>
            <Expression xsi:type="scr:ExpressionTransform">
              <scr:Name>NoseCoordinates</scr:Name>
              <scr:Description>Nose tip X Y Coordinates</scr:Description>
              <scr:Expression>new(
Item2.noseX + Item1.addWidth as noseX,
Item2.noseY + Item1.addHeight as noseY
)</scr:Expression>
            </Expression>
            <Expression xsi:type="GroupWorkflow">
              <Name>Outpout CSV mask filename</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>VideoFileName</Name>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>DirName</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="rx:Zip" />
                  </Expression>
                  <Expression xsi:type="ipy:PythonTransform">
                    <ipy:Name>nose tip coord filename</ipy:Name>
                    <ipy:Description />
                    <ipy:Script>import clr

def getOutputType():
    return clr.GetClrType(str)

def process(value):
  filename=value.Item1
  if '.avi' in filename:
    filename=filename.replace('.avi', '_NoseTipCoord.csv') 
  elif '.mp4' in filename:
    filename=filename.replace('.mp4', '_NoseTipCoord.csv') 
  path = value.Item2 + filename 
  return path
</ipy:Script>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                </Nodes>
                <Edges>
                  <Edge From="0" To="2" Label="Source1" />
                  <Edge From="1" To="2" Label="Source2" />
                  <Edge From="2" To="3" Label="Source1" />
                  <Edge From="3" To="4" Label="Source1" />
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="PropertyMapping">
              <PropertyMappings>
                <Property Name="FileName" />
              </PropertyMappings>
            </Expression>
            <Expression xsi:type="io:CsvWriter">
              <io:FileName>D:\Vincent\NWB\ExampleDatasets\Vincent\Ephys_Behavior\whisker_asym\sc007\sc007_1216\WhiskerTracking\test_NoseTipCoord.csv</io:FileName>
              <io:ListSeparator>,</io:ListSeparator>
              <io:Append>false</io:Append>
              <io:Overwrite>true</io:Overwrite>
              <io:Suffix>None</io:Suffix>
              <io:IncludeHeader>false</io:IncludeHeader>
              <io:Selector>noseX,noseY</io:Selector>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
          </Nodes>
          <Edges>
            <Edge From="0" To="1" Label="Source1" />
            <Edge From="1" To="2" Label="Source1" />
            <Edge From="2" To="3" Label="Source1" />
            <Edge From="3" To="4" Label="Source1" />
            <Edge From="4" To="5" Label="Source1" />
            <Edge From="4" To="7" Label="Source1" />
            <Edge From="5" To="6" Label="Source1" />
            <Edge From="5" To="7" Label="Source2" />
            <Edge From="6" To="8" Label="Source2" />
            <Edge From="7" To="8" Label="Source1" />
            <Edge From="8" To="9" Label="Source1" />
            <Edge From="9" To="12" Label="Source1" />
            <Edge From="10" To="11" Label="Source1" />
            <Edge From="11" To="12" Label="Source2" />
            <Edge From="12" To="13" Label="Source1" />
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges />
  </Workflow>
</WorkflowBuilder>